// script_tool.gox - Tool for executing arbitrary JavaScript in After Effects
// This tool allows for complete interaction with the After Effects object model hierarchy
// as documented at https://ae-scripting.docsforadobe.dev/introduction/objectmodel/
// Complete scripting guide available at: https://ae-scripting.docsforadobe.dev/
import (
    "github.com/sunqirui1987/ae-mcp/pkg/tools"
)

// Tool for executing JavaScript code in After Effects
// The After Effects Object Model provides programmatic access to the entire AE application structure:
// - Application object (app): The global entry point to access AE settings and objects
// - Project: Represents an AE project containing compositions, items, and render queue
// - CompItem: Represents compositions that contain layers and can be rendered
// - Layer objects: Various types (AVLayer, CameraLayer, LightLayer, ShapeLayer, TextLayer)
// - Property objects: Represent AE properties on layers that can be animated with keyframes
// - RenderQueue: Controls rendering operations and output modules
// - Sources: Represent different types of footage (files, placeholders, solids)
//
// The hierarchy follows the UI structure: Application contains Projects, which contain
// Compositions with Layers, which have Properties containing Markers and Keyframes.
// The RenderQueue contains render settings and output modules.
// 
// For complete documentation, refer to: https://ae-scripting.docsforadobe.dev/
tool "ae_execute_script", => {
    description "Execute arbitrary JavaScript code in After Effects to interact with any object in the AE object model hierarchy including: Application, Project, Items (Compositions, Footage, Folders), Layers (AV, Camera, Light, Shape, Text), Properties, RenderQueue, Sources, and more. Scripts have full access to create, modify, and automate all aspects of After Effects projects. Full documentation: https://ae-scripting.docsforadobe.dev/"
    string "script", => {
        description "JavaScript code to execute. Can use the entire After Effects scripting object model including: app (Application), app.project (Project), CompItem, Layer objects, Property objects, and utility functions for time conversion and debugging. See https://ae-scripting.docsforadobe.dev/ for complete reference."
        required
    }
}

// Convert parameters to appropriate Go types
scriptCode := ${script}.(string)

// Call the implementation in golang
var result map[string]interface{}
var err error
result, err = tools.ExecuteScript(scriptCode)
if err != nil {
    return text({
        JSON: {"error": err.Error()},
    })
}
return text({
    JSON: result,
}) 