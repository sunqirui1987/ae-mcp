// add_custom_shape_layer_tool.gox - Tool for adding custom shape layers
import (
	"github.com/sunqirui1987/ae-mcp/pkg/tools"
)

// Tool for adding custom shape layers
tool "mcp_aftereffects_ae_add_custom_shape_layer", => {
	description "Add a custom shape layer to a composition with specified vertices and properties"
	string "composition_name", => {
		description "Name of the composition to add the layer to"
		required
	}
	string "layer_name", => {
		description "Name of the new shape layer"
		required
	}
	array "vertices", => {
		description "Array of points defining the shape's vertices as [[x1,y1], [x2,y2], ...]"
		required
	}
	bool "closed", => {
		description "Whether the shape is closed (connects first and last vertices)"
	}
	array "in_tangents", => {
		description "Array of incoming tangent points as [[x1,y1], [x2,y2], ...] (must match vertices length)"
	}
	array "out_tangents", => {
		description "Array of outgoing tangent points as [[x1,y1], [x2,y2], ...] (must match vertices length)"
	}
	array "feather_radii", => {
		description "Array of feather point radii (optional, for mask feathering)"
	}
}

// Convert parameters to appropriate Go types
compName := ${composition_name}.(string)
layerName := ${layer_name}.(string)

// Prepare argument map for MCP function
args := map[string]interface{}{
	"composition_name": compName,
	"layer_name": layerName,
	"vertices": ${vertices}.([]interface{}),
}

// Add optional parameters if provided
if ${closed} != nil {
	args["closed"] = ${closed}.(bool)
}

if ${in_tangents} != nil {
	args["in_tangents"] = ${in_tangents}.([]interface{})
}

if ${out_tangents} != nil {
	args["out_tangents"] = ${out_tangents}.([]interface{})
}

if ${feather_radii} != nil {
	args["feather_radii"] = ${feather_radii}.([]interface{})
}

// Call the implementation in golang
result, err := tools.MCPAddCustomShapeLayer(args)
if err != nil {
	return text({
		JSON: {"error": err.Error()},
	})
}
return text({
	JSON: result,
}) 