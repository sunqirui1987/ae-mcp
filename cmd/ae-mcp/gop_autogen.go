// Code generated by gop (Go+); DO NOT EDIT.

package main

import (
	"context"
	"github.com/goplus/mcp/server"
	"github.com/mark3labs/mcp-go/mcp"
	"github.com/sunqirui1987/ae-mcp/pkg/tools"
)

const _ = true

type add_solid_layer struct {
	server.ToolApp
	*MCPApp
}
type create_composition struct {
	server.ToolApp
	*MCPApp
}
type get_composition_details struct {
	server.ToolApp
	*MCPApp
}
type MCPApp struct {
	server.MCPApp
}
type modify_layer struct {
	server.ToolApp
	*MCPApp
}
type project struct {
	server.ToolApp
	*MCPApp
}
//line cmd/ae-mcp/main_mcp.gox:1
// main_mcp.gox - Main MCP server definition
func (this *MCPApp) MainEntry() {
//line cmd/ae-mcp/main_mcp.gox:2:1
	this.Server("After Effects MCP Tool Suite ðŸš€", "1.0.0")
}
func (this *MCPApp) Main() {
	server.Gopt_MCPApp_Main(this, nil, []server.ToolProto{new(add_solid_layer), new(create_composition), new(get_composition_details), new(modify_layer), new(project)}, nil)
}
//line cmd/ae-mcp/add_solid_layer_tool.gox:6
// Tool for adding solid color layers
func (this *add_solid_layer) Main(_gop_arg0 context.Context, _gop_arg1 mcp.CallToolRequest, _gop_arg2 *server.ToolAppProto) mcp.Content {
	this.ToolApp.Main(_gop_arg0, _gop_arg1, _gop_arg2)
//line cmd/ae-mcp/add_solid_layer_tool.gox:7:1
	this.Tool("ae_add_solid_layer", func() {
//line cmd/ae-mcp/add_solid_layer_tool.gox:8:1
		this.Description("Add a solid color layer to a composition")
//line cmd/ae-mcp/add_solid_layer_tool.gox:9:1
		this.String("composition_name", func() {
//line cmd/ae-mcp/add_solid_layer_tool.gox:10:1
			this.Description("Name of the composition to add the layer to")
//line cmd/ae-mcp/add_solid_layer_tool.gox:11:1
			this.Required()
		})
//line cmd/ae-mcp/add_solid_layer_tool.gox:13:1
		this.String("layer_name", func() {
//line cmd/ae-mcp/add_solid_layer_tool.gox:14:1
			this.Description("Name of the new layer")
//line cmd/ae-mcp/add_solid_layer_tool.gox:15:1
			this.Required()
		})
//line cmd/ae-mcp/add_solid_layer_tool.gox:17:1
		this.Array("color", func() {
//line cmd/ae-mcp/add_solid_layer_tool.gox:18:1
			this.Description("RGB color array [R, G, B], with values ranging from 0-1")
//line cmd/ae-mcp/add_solid_layer_tool.gox:19:1
			this.Required()
		})
//line cmd/ae-mcp/add_solid_layer_tool.gox:21:1
		this.Float("width", func() {
//line cmd/ae-mcp/add_solid_layer_tool.gox:22:1
			this.Description("Layer width (pixels), defaults to composition width")
		})
//line cmd/ae-mcp/add_solid_layer_tool.gox:24:1
		this.Float("height", func() {
//line cmd/ae-mcp/add_solid_layer_tool.gox:25:1
			this.Description("Layer height (pixels), defaults to composition height")
		})
//line cmd/ae-mcp/add_solid_layer_tool.gox:27:1
		this.Bool("is3D", func() {
//line cmd/ae-mcp/add_solid_layer_tool.gox:28:1
			this.Description("Whether the layer is 3D")
		})
	})
//line cmd/ae-mcp/add_solid_layer_tool.gox:33:1
	compName := this.Gop_Env("composition_name").(string)
//line cmd/ae-mcp/add_solid_layer_tool.gox:34:1
	layerName := this.Gop_Env("layer_name").(string)
//line cmd/ae-mcp/add_solid_layer_tool.gox:37:1
	colorArray := this.Gop_Env("color").([]interface{})
//line cmd/ae-mcp/add_solid_layer_tool.gox:38:1
	var colorVal tools.ColorRGB
//line cmd/ae-mcp/add_solid_layer_tool.gox:41:1
	if len(colorArray) >= 3 {
//line cmd/ae-mcp/add_solid_layer_tool.gox:42:1
		r, _ := colorArray[0].(float64)
//line cmd/ae-mcp/add_solid_layer_tool.gox:43:1
		g, _ := colorArray[1].(float64)
//line cmd/ae-mcp/add_solid_layer_tool.gox:44:1
		b, _ := colorArray[2].(float64)
//line cmd/ae-mcp/add_solid_layer_tool.gox:45:1
		colorVal = tools.ColorRGB{r, g, b}
	} else {
//line cmd/ae-mcp/add_solid_layer_tool.gox:47:1
		colorVal = tools.ColorRGB{1.0, 1.0, 1.0}
	}
//line cmd/ae-mcp/add_solid_layer_tool.gox:51:1
	widthVal := 0
//line cmd/ae-mcp/add_solid_layer_tool.gox:52:1
	if this.Gop_Env("width") != nil {
//line cmd/ae-mcp/add_solid_layer_tool.gox:53:1
		widthVal = int(this.Gop_Env("width").(float64))
	}
//line cmd/ae-mcp/add_solid_layer_tool.gox:56:1
	heightVal := 0
//line cmd/ae-mcp/add_solid_layer_tool.gox:57:1
	if this.Gop_Env("height") != nil {
//line cmd/ae-mcp/add_solid_layer_tool.gox:58:1
		heightVal = int(this.Gop_Env("height").(float64))
	}
//line cmd/ae-mcp/add_solid_layer_tool.gox:61:1
	is3DVal := false
//line cmd/ae-mcp/add_solid_layer_tool.gox:62:1
	if this.Gop_Env("is3D") != nil {
//line cmd/ae-mcp/add_solid_layer_tool.gox:63:1
		is3DVal = this.Gop_Env("is3D").(bool)
	}
//line cmd/ae-mcp/add_solid_layer_tool.gox:66:1
	// Call the implementation in golang
	var result map[string]interface{}
//line cmd/ae-mcp/add_solid_layer_tool.gox:68:1
	var err error
//line cmd/ae-mcp/add_solid_layer_tool.gox:69:1
	result, err = tools.AddSolidLayer(compName, layerName, colorVal, widthVal, heightVal, is3DVal)
//line cmd/ae-mcp/add_solid_layer_tool.gox:70:1
	if err != nil {
//line cmd/ae-mcp/add_solid_layer_tool.gox:71:1
		return server.Text__1(server.JsonContent{JSON: map[string]string{"error": err.Error()}})
	}
//line cmd/ae-mcp/add_solid_layer_tool.gox:75:1
	return server.Text__1(server.JsonContent{JSON: result})
}
func (this *add_solid_layer) Classclone() server.ToolProto {
	_gop_ret := *this
	return &_gop_ret
}
//line cmd/ae-mcp/create_composition_tool.gox:6
// Tool for creating new compositions
func (this *create_composition) Main(_gop_arg0 context.Context, _gop_arg1 mcp.CallToolRequest, _gop_arg2 *server.ToolAppProto) mcp.Content {
//line cmd/ae-mcp/add_solid_layer_tool.gox:75:1
	this.ToolApp.Main(_gop_arg0, _gop_arg1, _gop_arg2)
//line cmd/ae-mcp/create_composition_tool.gox:7:1
	this.Tool("ae_create_composition", func() {
//line cmd/ae-mcp/create_composition_tool.gox:8:1
		this.Description("Create a new composition in After Effects")
//line cmd/ae-mcp/create_composition_tool.gox:9:1
		this.String("name", func() {
//line cmd/ae-mcp/create_composition_tool.gox:10:1
			this.Description("Name of the new composition")
//line cmd/ae-mcp/create_composition_tool.gox:11:1
			this.Required()
		})
//line cmd/ae-mcp/create_composition_tool.gox:13:1
		this.Float("width", func() {
//line cmd/ae-mcp/create_composition_tool.gox:14:1
			this.Description("Composition width (pixels)")
//line cmd/ae-mcp/create_composition_tool.gox:15:1
			this.Required()
		})
//line cmd/ae-mcp/create_composition_tool.gox:17:1
		this.Float("height", func() {
//line cmd/ae-mcp/create_composition_tool.gox:18:1
			this.Description("Composition height (pixels)")
//line cmd/ae-mcp/create_composition_tool.gox:19:1
			this.Required()
		})
//line cmd/ae-mcp/create_composition_tool.gox:21:1
		this.Float("duration", func() {
//line cmd/ae-mcp/create_composition_tool.gox:22:1
			this.Description("Composition duration (seconds)")
//line cmd/ae-mcp/create_composition_tool.gox:23:1
			this.Required()
		})
//line cmd/ae-mcp/create_composition_tool.gox:25:1
		this.Float("frameRate", func() {
//line cmd/ae-mcp/create_composition_tool.gox:26:1
			this.Description("Composition frame rate")
		})
	})
//line cmd/ae-mcp/create_composition_tool.gox:31:1
	nameStr := this.Gop_Env("name").(string)
//line cmd/ae-mcp/create_composition_tool.gox:34:1
	widthVal := int(this.Gop_Env("width").(float64))
//line cmd/ae-mcp/create_composition_tool.gox:35:1
	if widthVal == 0 {
//line cmd/ae-mcp/create_composition_tool.gox:36:1
		widthVal = 1920
	}
//line cmd/ae-mcp/create_composition_tool.gox:39:1
	heightVal := int(this.Gop_Env("height").(float64))
//line cmd/ae-mcp/create_composition_tool.gox:40:1
	if heightVal == 0 {
//line cmd/ae-mcp/create_composition_tool.gox:41:1
		heightVal = 1080
	}
//line cmd/ae-mcp/create_composition_tool.gox:44:1
	durationVal, ok := this.Gop_Env("duration").(float64)
//line cmd/ae-mcp/create_composition_tool.gox:45:1
	if !ok {
//line cmd/ae-mcp/create_composition_tool.gox:46:1
		durationVal = 60
	}
//line cmd/ae-mcp/create_composition_tool.gox:49:1
	frameRateVal, ok := this.Gop_Env("frameRate").(float64)
//line cmd/ae-mcp/create_composition_tool.gox:50:1
	if !ok {
//line cmd/ae-mcp/create_composition_tool.gox:51:1
		frameRateVal = 30
	}
//line cmd/ae-mcp/create_composition_tool.gox:54:1
	// Call the implementation in golang
	var result map[string]interface{}
//line cmd/ae-mcp/create_composition_tool.gox:56:1
	var err error
//line cmd/ae-mcp/create_composition_tool.gox:57:1
	result, err = tools.CreateComposition(nameStr, widthVal, heightVal, durationVal, frameRateVal)
//line cmd/ae-mcp/create_composition_tool.gox:58:1
	if err != nil {
//line cmd/ae-mcp/create_composition_tool.gox:59:1
		return server.Text__1(server.JsonContent{JSON: map[string]string{"error": err.Error()}})
	}
//line cmd/ae-mcp/create_composition_tool.gox:63:1
	return server.Text__1(server.JsonContent{JSON: result})
}
func (this *create_composition) Classclone() server.ToolProto {
	_gop_ret := *this
	return &_gop_ret
}
//line cmd/ae-mcp/get_composition_details_tool.gox:6
// Tool for getting composition details
func (this *get_composition_details) Main(_gop_arg0 context.Context, _gop_arg1 mcp.CallToolRequest, _gop_arg2 *server.ToolAppProto) mcp.Content {
//line cmd/ae-mcp/create_composition_tool.gox:63:1
	this.ToolApp.Main(_gop_arg0, _gop_arg1, _gop_arg2)
//line cmd/ae-mcp/get_composition_details_tool.gox:7:1
	this.Tool("ae_get_composition_details", func() {
//line cmd/ae-mcp/get_composition_details_tool.gox:8:1
		this.Description("Get detailed information about a specific composition")
//line cmd/ae-mcp/get_composition_details_tool.gox:9:1
		this.String("composition_name", func() {
//line cmd/ae-mcp/get_composition_details_tool.gox:10:1
			this.Description("Name of the composition to get details for")
//line cmd/ae-mcp/get_composition_details_tool.gox:11:1
			this.Required()
		})
	})
//line cmd/ae-mcp/get_composition_details_tool.gox:16:1
	compName := this.Gop_Env("composition_name").(string)
//line cmd/ae-mcp/get_composition_details_tool.gox:18:1
	// Call the implementation in golang
	var result map[string]interface{}
//line cmd/ae-mcp/get_composition_details_tool.gox:20:1
	var err error
//line cmd/ae-mcp/get_composition_details_tool.gox:21:1
	result, err = tools.GetCompositionDetails(compName)
//line cmd/ae-mcp/get_composition_details_tool.gox:22:1
	if err != nil {
//line cmd/ae-mcp/get_composition_details_tool.gox:23:1
		return server.Text__1(server.JsonContent{JSON: map[string]string{"error": err.Error()}})
	}
//line cmd/ae-mcp/get_composition_details_tool.gox:27:1
	return server.Text__1(server.JsonContent{JSON: result})
}
func (this *get_composition_details) Classclone() server.ToolProto {
	_gop_ret := *this
	return &_gop_ret
}
//line cmd/ae-mcp/modify_layer_tool.gox:6
// Tool for modifying layer properties
func (this *modify_layer) Main(_gop_arg0 context.Context, _gop_arg1 mcp.CallToolRequest, _gop_arg2 *server.ToolAppProto) mcp.Content {
//line cmd/ae-mcp/get_composition_details_tool.gox:27:1
	this.ToolApp.Main(_gop_arg0, _gop_arg1, _gop_arg2)
//line cmd/ae-mcp/modify_layer_tool.gox:7:1
	this.Tool("ae_modify_layer", func() {
//line cmd/ae-mcp/modify_layer_tool.gox:8:1
		this.Description("Modify properties of an existing layer")
//line cmd/ae-mcp/modify_layer_tool.gox:9:1
		this.String("composition_name", func() {
//line cmd/ae-mcp/modify_layer_tool.gox:10:1
			this.Description("Name of the composition containing the layer")
//line cmd/ae-mcp/modify_layer_tool.gox:11:1
			this.Required()
		})
//line cmd/ae-mcp/modify_layer_tool.gox:13:1
		this.Object("layer_identifier", func() {
//line cmd/ae-mcp/modify_layer_tool.gox:14:1
			this.Description("Layer identifier, can be in the format {name: 'layer name'} or {index: 1}")
//line cmd/ae-mcp/modify_layer_tool.gox:15:1
			this.Required()
		})
//line cmd/ae-mcp/modify_layer_tool.gox:17:1
		this.Object("properties", func() {
//line cmd/ae-mcp/modify_layer_tool.gox:18:1
			this.Description("Properties object to modify: position, scale, rotation, opacity, etc.")
//line cmd/ae-mcp/modify_layer_tool.gox:19:1
			this.Required()
		})
	})
//line cmd/ae-mcp/modify_layer_tool.gox:24:1
	compName := this.Gop_Env("composition_name").(string)
//line cmd/ae-mcp/modify_layer_tool.gox:27:1
	layerIdObj := this.Gop_Env("layer_identifier").(map[string]interface{})
//line cmd/ae-mcp/modify_layer_tool.gox:28:1
	var layerId tools.LayerIdentifier
//line cmd/ae-mcp/modify_layer_tool.gox:31:1
	if
//line cmd/ae-mcp/modify_layer_tool.gox:31:1
	name, ok := layerIdObj["name"]; ok {
//line cmd/ae-mcp/modify_layer_tool.gox:32:1
		if
//line cmd/ae-mcp/modify_layer_tool.gox:32:1
		nameStr, ok := name.(string); ok {
//line cmd/ae-mcp/modify_layer_tool.gox:33:1
			layerId = tools.LayerIdentifier{Name: nameStr}
		}
	} else
//line cmd/ae-mcp/modify_layer_tool.gox:35:1
	if
//line cmd/ae-mcp/modify_layer_tool.gox:35:1
	index, ok := layerIdObj["index"]; ok {
//line cmd/ae-mcp/modify_layer_tool.gox:37:1
		if
//line cmd/ae-mcp/modify_layer_tool.gox:37:1
		idxFloat, ok := index.(float64); ok {
//line cmd/ae-mcp/modify_layer_tool.gox:38:1
			layerId = tools.LayerIdentifier{Index: int(idxFloat)}
		}
	}
//line cmd/ae-mcp/modify_layer_tool.gox:42:1
	props := this.Gop_Env("properties").(map[string]interface{})
//line cmd/ae-mcp/modify_layer_tool.gox:44:1
	// Call the implementation in golang
	var result map[string]interface{}
//line cmd/ae-mcp/modify_layer_tool.gox:46:1
	var err error
//line cmd/ae-mcp/modify_layer_tool.gox:47:1
	result, err = tools.ModifyLayer(compName, layerId, props)
//line cmd/ae-mcp/modify_layer_tool.gox:48:1
	if err != nil {
//line cmd/ae-mcp/modify_layer_tool.gox:49:1
		return server.Text__1(server.JsonContent{JSON: map[string]string{"error": err.Error()}})
	}
//line cmd/ae-mcp/modify_layer_tool.gox:53:1
	return server.Text__1(server.JsonContent{JSON: result})
}
func (this *modify_layer) Classclone() server.ToolProto {
	_gop_ret := *this
	return &_gop_ret
}
//line cmd/ae-mcp/project_tool.gox:6
// Tool for getting project information
func (this *project) Main(_gop_arg0 context.Context, _gop_arg1 mcp.CallToolRequest, _gop_arg2 *server.ToolAppProto) mcp.Content {
//line cmd/ae-mcp/modify_layer_tool.gox:53:1
	this.ToolApp.Main(_gop_arg0, _gop_arg1, _gop_arg2)
//line cmd/ae-mcp/project_tool.gox:7:1
	this.Tool("ae_get_project_info", func() {
//line cmd/ae-mcp/project_tool.gox:8:1
		this.Description("Get information about the current After Effects project")
	})
//line cmd/ae-mcp/project_tool.gox:13:1
	// Call the implementation in golang
	var result map[string]interface{}
//line cmd/ae-mcp/project_tool.gox:15:1
	var err error
//line cmd/ae-mcp/project_tool.gox:16:1
	result, err = tools.GetProjectInfo()
//line cmd/ae-mcp/project_tool.gox:17:1
	if err != nil {
//line cmd/ae-mcp/project_tool.gox:18:1
		return server.Text__1(server.JsonContent{JSON: map[string]string{"error": err.Error()}})
	}
//line cmd/ae-mcp/project_tool.gox:22:1
	return server.Text__1(server.JsonContent{JSON: result})
}
func (this *project) Classclone() server.ToolProto {
	_gop_ret := *this
	return &_gop_ret
}
func main() {
//line cmd/ae-mcp/project_tool.gox:22:1
	new(MCPApp).Main()
}
