// add_solid_layer_tool.gox - Tool for adding solid color layers
import (
    "github.com/sunqirui1987/ae-mcp/pkg/tools"
)

// Tool for adding solid color layers
tool "ae_add_solid_layer", => {
    description "Add a solid color layer to a composition"
    string "composition_name", => {
        description "Name of the composition to add the layer to"
        required
    }
    string "layer_name", => {
        description "Name of the new layer"
        required
    }
    array "color", => {
        description "RGB color array [R, G, B], with values ranging from 0-1"
        required
    }
    float "width", => {
        description "Layer width (pixels), defaults to composition width"
    }
    float "height", => {
        description "Layer height (pixels), defaults to composition height"
    }
    bool "is3D", => {
        description "Whether the layer is 3D"
    }
}

// Convert parameters to appropriate Go types
compName := ${composition_name}.(string)
layerName := ${layer_name}.(string)

// Convert color array to ColorRGB type
colorArray := ${color}.([]interface{})
var colorVal tools.ColorRGB

// Initialize with default white if needed
if len(colorArray) >= 3 {
    r, _ := colorArray[0].(float64)
    g, _ := colorArray[1].(float64)
    b, _ := colorArray[2].(float64)
    colorVal = tools.ColorRGB{r, g, b}
} else {
    colorVal = tools.ColorRGB{1.0, 1.0, 1.0} // Default white
}

// Convert width and height from float to int
widthVal := 0
if ${width} != nil {
    widthVal = int(${width}.(float64))
}

heightVal := 0
if ${height} != nil {
    heightVal = int(${height}.(float64))
}

is3DVal := false
if ${is3D} != nil {
    is3DVal = ${is3D}.(bool)
}

// Call the implementation in golang
var result map[string]interface{}
var err error
result, err = tools.AddSolidLayer(compName, layerName, colorVal, widthVal, heightVal, is3DVal)
if err != nil {
    return text({
        JSON: {"error": err.Error()},
    })
}
return text({
    JSON: result,
}) 