// add_text_layer_tool.gox - Tool for adding text layers
import (
    "github.com/sunqirui1987/ae-mcp/pkg/tools"
)

// Tool for adding text layers
tool "ae_add_text_layer", => {
    description "Add a text layer to a composition"
    string "composition_name", => {
        description "Name of the composition to add the layer to"
        required
    }
    string "layer_name", => {
        description "Name of the new text layer"
        required
    }
    string "text", => {
        description "Text content"
        required
    }
    object "options", => {
        description "Text options (fontSize, fontName, color, position, justification, etc.)"
    }
}

// Convert parameters to appropriate Go types
compName := ${composition_name}.(string)
layerName := ${layer_name}.(string)
textContent := ${text}.(string)

// Convert text options if provided
var textOptions *tools.TextOptions
if ${options} != nil {
    optionsMap := ${options}.(map[string]interface{})
    
    // Create text options structure
    textOptions = &tools.TextOptions{}
    
    // Handle fontSize
    if fontSize, ok := optionsMap["fontSize"].(float64); ok {
        textOptions.FontSize = fontSize
    }
    
    // Handle fontName/fontFamily
    if fontName, ok := optionsMap["fontName"].(string); ok {
        textOptions.FontName = fontName
    }
    if fontFamily, ok := optionsMap["fontFamily"].(string); ok {
        textOptions.FontFamily = fontFamily
    }
    
    // Handle colors
    if color, ok := optionsMap["color"].([]interface{}); ok && len(color) >= 3 {
        r, _ := color[0].(float64)
        g, _ := color[1].(float64)
        b, _ := color[2].(float64)
        textOptions.Color = tools.ColorRGB{r, g, b}
    }
    if fillColor, ok := optionsMap["fillColor"].([]interface{}); ok && len(fillColor) >= 3 {
        r, _ := fillColor[0].(float64)
        g, _ := fillColor[1].(float64)
        b, _ := fillColor[2].(float64)
        textOptions.FillColor = tools.ColorRGB{r, g, b}
    }
    if strokeColor, ok := optionsMap["strokeColor"].([]interface{}); ok && len(strokeColor) >= 3 {
        r, _ := strokeColor[0].(float64)
        g, _ := strokeColor[1].(float64)
        b, _ := strokeColor[2].(float64)
        textOptions.StrokeColor = tools.ColorRGB{r, g, b}
    }
    
    // Handle position
    if position, ok := optionsMap["position"].([]interface{}); ok && len(position) >= 2 {
        x, _ := position[0].(float64)
        y, _ := position[1].(float64)
        textOptions.Position = [2]float64{x, y}
    }
    
    // Handle other properties
    if justification, ok := optionsMap["justification"].(string); ok {
        textOptions.Justification = justification
    }
    if strokeWidth, ok := optionsMap["strokeWidth"].(float64); ok {
        textOptions.StrokeWidth = strokeWidth
    }
    if tracking, ok := optionsMap["tracking"].(float64); ok {
        textOptions.Tracking = tracking
    }
    if leading, ok := optionsMap["leading"].(float64); ok {
        textOptions.Leading = leading
    }
    
    // Handle boolean properties
    if applyFill, ok := optionsMap["applyFill"].(bool); ok {
        textOptions.ApplyFill = &applyFill
    }
    if applyStroke, ok := optionsMap["applyStroke"].(bool); ok {
        textOptions.ApplyStroke = &applyStroke
    }
    if fauxBold, ok := optionsMap["fauxBold"].(bool); ok {
        textOptions.FauxBold = &fauxBold
    }
    if fauxItalic, ok := optionsMap["fauxItalic"].(bool); ok {
        textOptions.FauxItalic = &fauxItalic
    }
    if allCaps, ok := optionsMap["allCaps"].(bool); ok {
        textOptions.AllCaps = &allCaps
    }
    if smallCaps, ok := optionsMap["smallCaps"].(bool); ok {
        textOptions.SmallCaps = &smallCaps
    }
}

// Call the implementation in golang
var result map[string]interface{}
var err error
result, err = tools.AddTextLayer(compName, layerName, textContent, textOptions)
if err != nil {
    return text({
        JSON: {"error": err.Error()},
    })
}
return text({
    JSON: result,
}) 