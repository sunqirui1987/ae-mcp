// update_manim_layer_tool.gox - Tool for updating Manim animation layers
import (
    "github.com/sunqirui1987/ae-mcp/pkg/tools"
)

// Tool for updating Manim animation layers
tool "ae_update_manim_layer", => {
    description "Update an existing Manim animation layer"
    string "layer_id", => {
        description "ID of the layer to update"
        required
    }
    string "manim_code", => {
        description "New Manim Python code for the animation"
        required
    }
    string "scene_name", => {
        description "Name of the Manim scene class"
        required
    }
    object "options", => {
        description "Layer options (position, scale, rotation, opacity, etc.)"
    }
}

// Convert parameters to appropriate Go types
layerID := ${layer_id}.(string)
manimCode := ${manim_code}.(string)
sceneName := ${scene_name}.(string)

// Convert layer options if provided
var layerOptions *tools.LayerOptions
if ${options} != nil {
    optionsMap := ${options}.(map[string]interface{})
    
    // Create layer options structure
    layerOptions = &tools.LayerOptions{}
    
    // Handle position
    if position, ok := optionsMap["position"].([]interface{}); ok && len(position) >= 2 {
        x, _ := position[0].(float64)
        y, _ := position[1].(float64)
        layerOptions.Position = [2]float64{x, y}
    }
    
    // Handle scale
    if scale, ok := optionsMap["scale"].([]interface{}); ok && len(scale) >= 2 {
        x, _ := scale[0].(float64)
        y, _ := scale[1].(float64)
        layerOptions.Scale = [2]float64{x, y}
    }
    
    // Handle rotation
    if rotation, ok := optionsMap["rotation"].(float64); ok {
        layerOptions.Rotation = rotation
    }
    
    // Handle opacity
    if opacity, ok := optionsMap["opacity"].(float64); ok {
        layerOptions.Opacity = opacity
    }
    
    // Handle start time
    if startTime, ok := optionsMap["startTime"].(float64); ok {
        layerOptions.StartTime = startTime
    }
    
    // Handle duration
    if duration, ok := optionsMap["duration"].(float64); ok {
        layerOptions.Duration = duration
    }
}

// Create Manim tool
manimTool, err := tools.NewManimTool("output/manim")
if err != nil {
    return text({
        JSON: {"error": fmt.Sprintf("Failed to create Manim tool: %v", err)},
    })
}

// Call the implementation
result, err := manimTool.UpdateManimLayer(layerID, manimCode, sceneName)
if err != nil {
    return text({
        JSON: {"error": err.Error()},
    })
}

return text({
    JSON: result,
}) 